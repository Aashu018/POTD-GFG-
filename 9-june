

class Solution {
       public static List<String> find_permutation(String S) {
        List<String> result = new ArrayList<>();
        char[] chars = S.toCharArray();
        boolean[] visited = new boolean[chars.length];
        StringBuilder current = new StringBuilder();

        // Sort the characters in the input string
        // to ensure lexicographically sorted permutations
        Arrays.sort(chars);

        backtrack(chars, visited, current, result);

        return result;
    }

    private static void backtrack(char[] chars, boolean[] visited, StringBuilder current, List<String> result) {
        if (current.length() == chars.length) {
            result.add(current.toString());
            return;
        }

        for (int i = 0; i < chars.length; i++) {
            if (visited[i] || (i > 0 && chars[i] == chars[i - 1] && !visited[i - 1]))
                continue;

            visited[i] = true;
            current.append(chars[i]);

            backtrack(chars, visited, current, result);

            current.deleteCharAt(current.length() - 1);
            visited[i] = false;
        }
    }
}
